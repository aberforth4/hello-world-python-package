name: Publish Python Package

on:
  push:
    branches:
      - main

permissions:
  id-token: write  # Требуется для OIDC
  contents: read   # Для доступа к коду

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1. Проверяем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2. Устанавливаем Python и зависимости
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install build twine

      # Шаг 3. Собираем дистрибутив
      - name: Build the package
        run: python -m build

      - name: Mint API token
        id: mint-token
        env:
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ secrets.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ secrets.ACTIONS_ID_TOKEN_REQUEST_URL }}
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # output the API token for use in subsequent steps
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      # Шаг 4. Публикуем на PyPI через Trusted Publisher
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__  # Используется при Trusted Publisher
          TWINE_PASSWORD: ${{ steps.mint-token.outputs.api-token }}  # Используем токен, сгенерированный ранее
          PYPI_REPOSITORY: "pypi"
        run: python -m twine upload dist/*
